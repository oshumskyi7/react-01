{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Posts/Posts.module.css","components/Profile/MyPosts/Posts/Posts.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","Post","props","className","s","item","src","message","likesCount","maxLength10","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","MyPosts","React","memo","postsElements","posts","reverse","map","p","id","postsBlock","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","profile","error","style","formSummaryError","createField","Input","type","Object","keys","contacts","key","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","photos","large","userPhoto","mainPhoto","target","files","length","initialValues","formData","then","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.1941ce4b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3DkMd\",\"mainPhoto\":\"ProfileInfo_mainPhoto__2-Bip\",\"contact\":\"ProfileInfo_contact__sDB7g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MyPosts_item__2DmcJ\",\"postsBlock\":\"MyPosts_postsBlock__3skbR\",\"posts\":\"MyPosts_posts__1Nw7k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Posts_item__1Qlc2\"};","import React from 'react';\r\nimport s from './Posts.module.css';\r\n\r\nconst Post = (props) => {\r\n\r\n    return (\r\n\r\n\r\n        <div className={s.item}>\r\n            <img src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQfyn0fO1gUKPA_CMtHQn_dDLsBVvOppdbKRQ&usqp=CAU'></img>\r\n            {props.message}\r\n            <div>\r\n                \r\n                <span>like</span>{props.likesCount} \r\n\r\n            </div>\r\n        </div>\r\n\r\n\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\n\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\nimport Post from './Posts/Posts';\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nlet AddNewPostForm = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field name=\"newPostText\" component={Textarea} placeholder={\"Post message\"}\r\n                   validate={[required, maxLength10]} />\r\n        </div>\r\n        <div>\r\n            <button>Add post</button>\r\n        </div>\r\n    </form>;\r\n}\r\n\r\nlet AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostForm\"})(AddNewPostForm);\r\n\r\nconst MyPosts = React.memo(props => {\r\n    let postsElements =\r\n        [...props.posts]\r\n            .reverse()\r\n            .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>);\r\n\r\n    let newPostElement = React.createRef();\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addPostActionCreator } from '../../../redux/profile-reducer';\r\nimport MyPosts from './MyPosts';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React, {useState, useEffect} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status);\r\n    }, [props.status] );\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n            <div>\r\n                <b>Status: </b> <span onDoubleClick={ activateEditMode }>{props.status || \"-------\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange} autoFocus={true} onBlur={ deactivateEditMode }\r\n                       value={status} />\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport {createField, Input, Textarea} from \"../../Common/FormsControls/FormsControls\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport style from \"../../Common/FormsControls/FormsControls.module.css\";\r\n\r\nconst ProfileDataForm = ({handleSubmit, profile, error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div><button>save</button></div>\r\n        {error && <div className={style.formSummaryError}>\r\n            {error}\r\n        </div>\r\n        }\r\n        <div>\r\n            <b>Full name</b>: {createField(\"Full name\", \"fullName\", [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: { createField(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"} )}\r\n        </div>\r\n\r\n        <div>\r\n            <b>My professional skills</b>:\r\n            { createField(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea  )}\r\n        </div>\r\n\r\n\r\n        <div>\r\n            <b>About me</b>:\r\n            { createField(\"About me\", \"aboutMe\", [], Textarea  )}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return <div key={key} className={s.contact}>\r\n            <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\r\n            </div>\r\n        })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import React, {useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData) => {\r\n        saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false);\r\n            }\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} className={s.mainPhoto}/>\r\n                {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n\r\n                { editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData goToEditMode={() => {setEditMode(true)} } profile={profile} isOwner={isOwner}/> }\r\n\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}) => {\r\n    return <div>\r\n        {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\r\n        <div>\r\n            <b>Full name</b>: {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n        <div>\r\n            <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n        </div>\r\n        }\r\n\r\n        <div>\r\n            <b>About me</b>: {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n        })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\nconst Contact = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\n\r\nconst Profile = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo savePhoto={props.savePhoto}\r\n                isOwner={props.isOwner}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                saveProfile={props.saveProfile}\r\n                updateStatus={props.updateStatus} />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId ) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n       // console.log(\"RENDER PROFILE\");\r\n        return (\r\n            <Profile {...this.props}\r\n                    isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    //console.log('mapStateToProps PROFILE')\r\n    return ({\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    })\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter\r\n)(ProfileContainer);\r\n\r\n\r\n"],"sourceRoot":""}